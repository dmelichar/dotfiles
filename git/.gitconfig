[alias]
    # List aliases
	aliases = config --get-regexp alias

    # Clone a repository including all submodules
	c = clone --recursive

    # Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # View the current working tree status using the short format
	s = status -s

    # Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Find commits by source code.

    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"

    # Find commits by commit message.

    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"

    # List remote branches.

    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"

   	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

    # Set default editor
    editor = vim

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true

[diff]

	# Detect copies as well as renames
	renames = copies

[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]

	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[user]

    # Don't guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
	name = Daniel Melichar
	email = daniel@melichar.me


    useConfigOnly = true
	signkeyy = 4FC8925FC311331
[gpg]
	program = gpg
